---
title: "1b. üìä Tutorial: Getting the Open Human Mobility Data in a Reproducible Way using `spanishoddata` and aggregating it with `duckdb`"
from: markdown+emoji
code-annotations: hover
eval: false
number-sections: true
---

------------------------------------------------------------------------

# Setup

Before getting the data, make sure you have `{spanishoddata}` R package installed and loaded. We will also need `{tidyverse}` and `{sf}`.

```{r}
library(spanishoddata)
library(tidyverse)
library(sf)
```

The package needs a dedicated location on disk to save the data it downloads. Set it with:

```{r}
spod_set_data_dir("data")
```

The folder will be created if it does not exist.

```         
Data directory /path/to/your/working/dir/data does not exist. Attempting to create it.
Data directory is writeable.
Data directory successfully set to: /path/to/your/working/dir/data
```

Here we are just setting the data directory to a subdirectory called `data` in the current working directory. If you want to use a different directory, change the path to something like `spod_set_data_dir("C:/path/to/data")` on `Windows` or `spod_set_data_dir("/path/to/data")` on `Linux`/`macOS`.

::: callout-warning
If you do not set the data directory, the package will still work, but it will download the data into a termporary directory of the current `R` session and you will lose it if you restart the session.
:::

Now you are all set to start accessing the data!

# Get the data

The data consists of zone boundaries spatial data and flat tables with flows between the zones. There are more details in the codebooks on the package website ([codebook for v1 data covering years 2020-2021](https://ropenspain.github.io/spanishoddata/articles/v1-2020-2021-mitma-data-codebook.html), [codebook for v2 data covering years 2022 onwards](https://ropenspain.github.io/spanishoddata/articles/v2-2022-onwards-mitma-data-codebook.html)).

::: callout-note
We will be working with v2 data, as it is more advanced and contains more variables.
:::

::: callout-warning
v1 and v2 data are not directly comparable in terms of absolute number of trips between locations, as the methodologies for data colleciton and generation are slightly different.
:::

## Get the zone boundaries data


```{r}
zones <- spod_get_zones(zones = "districts", ver = 2)
```

```{r}
glimpse(zones)
```

```         
Rows: 3,909
Columns: 10
$ id                   <chr> "01001", "01002", "01004_AM", "01009_AM", "01010", "01017_AM", "01028_AM", "01‚Ä¶
$ name                 <chr> "Alegr√≠a-Dulantzi", "Amurrio", "Artziniega agregacion de municipios", "Asparre‚Ä¶
$ population           <dbl> 2925, 10307, 3005, 4599, 2951, 4314, 7515, 18009, 3418, 3771, 5029, 2636, 4466‚Ä¶
$ census_sections      <chr> "0100101001; 0100101002", "0100201001; 0100201002; 0100201003; 0100201004; 010‚Ä¶
$ census_districts     <chr> "0100101", "0100201", "0100401; 0104201", "0100901; 0101301; 0102101; 0102701;‚Ä¶
$ municipalities       <chr> "01001", "01002", "01004; 01042", "01009; 01013; 01021; 01027; 01053; 01061", ‚Ä¶
$ municipalities_mitma <chr> "01001", "01002", "01004_AM", "01009_AM", "01010", "01017_AM", "01028_AM", "01‚Ä¶
$ luas_mitma           <chr> "01001", "01002", "01004_AM", "01009_AM", "01010", "01017_AM", "01028_AM", "01‚Ä¶
$ district_ids_in_v1   <chr> "01001_AM", "01002", "01010_AM", "01001_AM", "01010_AM", "01043_AM", "01031_AM‚Ä¶
$ geometry             <MULTIPOLYGON [m]> MULTIPOLYGON (((538090.2 47..., MULTIPOLYGON (((501984.9 47..., M‚Ä¶
```

```{r}
gg_zones <- zones |>
  st_simplify(dTolerance = 400) |>
  ggplot() +
  geom_sf(linewidth = 0.2)

gg_zones
```

```{r}
#| include: false
ggsave(
  "media/1-mobility-data/mitms-district-zones.png",
  gg_zones,
  width = 4,
  height = 4,
  dpi = 200
)
```

![MITMS data zone boundaries](media/1-mobility-data/mitms-district-zones.png)

## Get the flows data

### Define the dates

Let us get a few days of data.

We can get all dates that are available in the data:

```{r}
available_dates <- spod_get_valid_dates(ver = 2)
```

Define the dates of interest, for example May 2nd and May 9th, 2024, and check if they are available in the data:

```{r}
dates <- c("2024-05-02", "2024-05-09")
all(dates %in% available_dates)
```

``` r
TRUE
```

{{< include includes/note-binder.qmd >}}


Note that some dates may be missing:

```{r}
"2024-11-09" %in% available_dates
```

``` r
FALSE
```

::: callout-warning
Due to mobile network outages, the data on certain dates is missing. Kindly keep this in mind when calculating mean monthly or weekly flows.

Please check the [original data page](https://www.transportes.gob.es/ministerio/proyectos-singulares/estudios-de-movilidad-con-big-data/opendata-movilidad){target="_blank"} for currently known missing dates. You can use `spod_get_valid_dates()` function to get all available dates as shown above.
:::


The code below will download the requested dates and create the `flows` table.

{{< include includes/note-ssd-data.qmd >}}

```{r}
flows <- spod_get(
  type = "origin-destination",
  zones = "districts",
  dates = dates
)
```

::: callout-tip
For the 4 requested dates, the `spod_get()` call above will download just under 1 GB of data. If you need to download more days, you will have to set the `max_download_size_gb` argument in `spod_get()`. This is a precaution against downloading too much data at once.
:::

You can now print the table to preview it:

```{r}
flows
```

```         
flows
# Source:   table<od_csv_clean_filtered> [?? x 20]
# Database: DuckDB v1.3.1 [root@Darwin 24.5.0:R 4.5.1/:memory:]
   date        hour id_origin id_destination distance activity_origin   activity_destination study_possible_origin
   <date>     <int> <fct>     <fct>          <fct>    <fct>             <fct>                <lgl>                
 1 2024-05-02    21 01002     01001          10-50    frequent_activity home                 FALSE                
 2 2024-05-02     0 01009_AM  01001          10-50    frequent_activity home                 FALSE                
 3 2024-05-02    13 01009_AM  01001          10-50    frequent_activity home                 FALSE                
 4 2024-05-02    15 01009_AM  01001          10-50    frequent_activity home                 FALSE                
 5 2024-05-02    17 01009_AM  01001          10-50    frequent_activity home                 FALSE                
 6 2024-05-02    19 01009_AM  01001          10-50    frequent_activity home                 FALSE                
 7 2024-05-02    20 01009_AM  01001          10-50    frequent_activity home                 FALSE                
 8 2024-05-02    21 01009_AM  01001          10-50    frequent_activity home                 FALSE                
 9 2024-05-02    22 01009_AM  01001          10-50    frequent_activity home                 FALSE                
10 2024-05-02    15 01017_AM  01001          10-50    frequent_activity home                 FALSE                
# ‚Ñπ more rows
# ‚Ñπ 12 more variables: study_possible_destination <lgl>, residence_province_ine_code <fct>,
#   residence_province_name <fct>, income <fct>, age <fct>, sex <fct>, n_trips <dbl>, trips_total_length_km <dbl>,
#   year <int>, month <int>, day <int>, time_slot <int>
# ‚Ñπ Use `print(n = ...)` to see more rows
```

Or use `glimpse()` to view its structure:

```{r}
glimpse(flows)
```

```
Rows: ??
Columns: 20
Database: DuckDB v1.3.1 [root@Darwin 24.5.0:R 4.5.1/:memory:]
$ date                        <date> 2024-05-02, 2024-05-02, 2024-05-02, 2024-05-02, 2024-05-02, 2024-05-02, 2024-0‚Ä¶
$ hour                        <int> 21, 0, 13, 15, 17, 19, 20, 21, 22, 15, 12, 16, 6, 11, 12, 17, 18, 22, 15, 19, 2‚Ä¶
$ id_origin                   <fct> 01002, 01009_AM, 01009_AM, 01009_AM, 01009_AM, 01009_AM, 01009_AM, 01009_AM, 01‚Ä¶
$ id_destination              <fct> 01001, 01001, 01001, 01001, 01001, 01001, 01001, 01001, 01001, 01001, 01001, 01‚Ä¶
$ distance                    <fct> 10-50, 10-50, 10-50, 10-50, 10-50, 10-50, 10-50, 10-50, 10-50, 10-50, 10-50, 10‚Ä¶
$ activity_origin             <fct> frequent_activity, frequent_activity, frequent_activity, frequent_activity, fre‚Ä¶
$ activity_destination        <fct> home, home, home, home, home, home, home, home, home, home, home, home, home, h‚Ä¶
$ study_possible_origin       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶
$ study_possible_destination  <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶
$ residence_province_ine_code <fct> 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01,‚Ä¶
$ residence_province_name     <fct> "Araba/√Ålava", "Araba/√Ålava", "Araba/√Ålava", "Araba/√Ålava", "Araba/√Ålava", "Ara‚Ä¶
$ income                      <fct> 10-15, 10-15, 10-15, 10-15, 10-15, 10-15, 10-15, 10-15, 10-15, 10-15, 10-15, 10‚Ä¶
$ age                         <fct> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶
$ sex                         <fct> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶
$ n_trips                     <dbl> 2.340, 2.241, 2.421, 4.646, 2.421, 5.209, 2.306, 2.340, 5.601, 2.421, 2.306, 3.‚Ä¶
$ trips_total_length_km       <dbl> 104.404, 28.306, 29.898, 65.224, 29.898, 95.034, 30.615, 40.013, 101.662, 28.39‚Ä¶
$ year                        <int> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2‚Ä¶
$ month                       <int> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5‚Ä¶
$ day                         <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2‚Ä¶
$ time_slot                   <int> 21, 0, 13, 15, 17, 19, 20, 21, 22, 15, 12, 16, 6, 11, 12, 17, 18, 22, 15, 19, 
```

::: callout-tip
`str()` and `summary()` will not work on this data in a way that you might expect, as it is not an ordinary `data.frame`, but a special `tbl_*` table object that is actually powered by [`DuckDB`](https://duckdb.org/) via [`{duckdb}`](https://r.duckdb.org/) R package in the background, but pretends to be a `tibble` (from [`{tibble}`](https://tibble.tidyverse.org/)/[`{dplyr}`](https://dplyr.tidyverse.org/)/[`{tidyverse}`](https://tidyverse.tidyverse.org/)).

```{r}
class(flows)
```

``` r
[1] "tbl_duckdb_connection" "tbl_dbi"               "tbl_sql"              
[4] "tbl_lazy"              "tbl"   
```
:::


::: callout-tip
The meaning of all the variables is explained in the [codebook](https://ropenspain.github.io/spanishoddata/articles/v2-2022-onwards-mitma-data-codebook.html#od-data).
:::



::: {.callout-tip collapse="true"}
### Getting data even faster

If you only need total daily flows between municipalties without any extra information, you can save time by getting pre-aggregated reduced size data directly from the [interactive map hosted by the Ministry of Transport and Sustainable Mobility](https://mapas-movilidad.transportes.gob.es/). To do this, kindly refer to the ["Quicky get daily data" vignette](https://ropenspain.github.io/spanishoddata/articles/quick-get.html). However, this is not recommended for studies that require the code to be reproducible, as the API may change at any time. You can use this functionality for quick mobility estimates and in classroom for experiments.
:::


### Data verification

When mobility data files are downloaded with `spod_get()` or `spod_download()`, they are automatically checked by file size against known size of the remote files to prevent currupted downloads and preserve data integrity. However, if you would like to do an extra check you can use `spod_check_files()` with the same arguments you used for `spod_get()` or `spod_download()`.


```{r}
file_check <- spod_check_files(
  type = "origin-destination",
  zones = "districts",
  dates = dates
)
```

```
Data version detected from dates: 2
Using existing disk cache: /path/to/your/working/dir/data/metadata_cache/metadata_s3_v2_2025-07-02.rds
All checked files are consistent.
```


```{r}
all(file_check$local_file_consistent)
```

```r
TRUE
```

If the some files were corrupted, you could easily find out which ones with:

```{r}
file_check |>
  filter(local_file_consistent == FALSE)
```

And you would be able to fix this by simply re-running the call to `spod_get()` or `spod_download()`.

# Aggregate the data

As noted before, the table you get from `spod_get()` is not an ordinary R `data.frame` or `tibble`. It is a database connection. As a result, you are actually supposed to query it using [SQL syntax of DuckDB](https://duckdb.org/docs/stable/sql/introduction.html#querying-a-table){target="_blank"}. However, thanks to the comprehensive ecosystem of R packages, for most operations, you can get away with using [`{dplyr}`](https://dplyr.tidyverse.org/) funtions and many other [`{tidyverse}`](https://tidyverse.tidyverse.org/) and base R tools, as if this was just a `data.frame` or `tibble` table.

::: {.callout-tip collapse="true"}
### Try SQL if you need advanced queries

Not all analytical and data processing capabilities of `DuckDB` are available via base R and `tidyverse` functions, in some cases you will have to resort to `SQL` language. Large language models are of great help with that, do not hesistate to paste the description of the table from `glimpse(trips)` and your query into your favourite LLM to get the `SQL` query.

You can send an [DuckDB SQL query](https://duckdb.org/docs/stable/sql/introduction.html#querying-a-table){target="_blank"} and get the result as shown below:
```{r}
con <- dbplyr::remote_con(flows) # get the underlying database connection
table_name <- dbplyr::remote_name(flows) # get the table name
DBI::dbGetQuery(con, glue::glue("SELECT * FROM {table_name} LIMIT 5")) # simple example of SQL query, but can be any query supported by DuckDB
```

:::

Many common data operations are supported, such as `{dplyr}`'s [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), [`select()`](https://dplyr.tidyverse.org/reference/select.html), [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html), [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html), [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) and more, as well as [`{lubridate}`](https://lubridate.tidyverse.org/) date and time manipulation functions, and base R `sum()`, `mean()`, `median()`, etc.

## Aggregation examples

Below you will find examples in pure R using `{dplyr}`/`{dbplyr}` and equivalent SQL queries, but also executed from R, so that you can run them. For any sequence of `{dplyr}`/`{dbplyr}` functions, you can always view the equivalent SQL query by replacing `collect()` with `show_query()`, for example:

```{r}
flows |>
  summarise(
    n_trips = sum(n_trips, na.rm = TRUE),
    .groups = "drop"
  ) |>
  show_query()
```

Gives you:

```sql
<SQL>
SELECT SUM(n_trips) AS n_trips
FROM od_csv_clean_filtered
```

### Count the total number of over all days

::: {.panel-tabset}
## R
```{r}
flows |>
  summarise(
    n_trips = sum(n_trips, na.rm = TRUE),
    .groups = "drop"
  ) |>
  collect()
```

## SQL
```{r}
DBI::dbGetQuery(
  conn = dbplyr::remote_con(flows),
  statement = glue::glue(
    "
  SELECT SUM(n_trips) AS n_trips
  FROM {dbplyr::remote_name(flows)}
  "
  )
)
```

:::


```r
# A tibble: 1 √ó 1    
     n_trips
       <dbl>
1 293442773.
```

### Count total number of trips per day

::: {.panel-tabset}
## R
```{r}
flows |>
  group_by(date) |>
  summarise(
    n_trips = sum(n_trips, na.rm = TRUE),
    .groups = "drop"
  ) |>
  collect()
```

## SQL

```{r}
DBI::dbGetQuery(
  conn = dbplyr::remote_con(flows),
  statement = glue::glue(
    "
  SELECT date, SUM(n_trips) AS n_trips
  FROM {dbplyr::remote_name(flows)}
  GROUP BY date
  ORDER BY date
  "
  )
)
```

:::


```r
# A tibble: 2 √ó 2    
  date          n_trips
  <date>          <dbl>
1 2024-05-02 143086514.
2 2024-05-09 150356260.
```


### Count total number of work trips in the morning hours by women vs men

::: {.panel-tabset}
## R
```{r}
m_vs_f_morning_commute <- flows |>
  filter(!is.na(sex), hour %in% 6:10) |>
  group_by(date, sex) |>
  summarise(
    n_trips = sum(n_trips, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(date, sex) |>
  collect()

m_vs_f_morning_commute
```

## SQL
```{r}
DBI::dbGetQuery(
  conn = dbplyr::remote_con(flows),
  statement = glue::glue(
    "
  SELECT date, sex, SUM(n_trips) AS n_trips
  FROM {dbplyr::remote_name(flows)}
  WHERE hour BETWEEN 6 AND 10
  GROUP BY date, sex
  ORDER BY date, sex
  "
  )
)
```

:::

```r
# A tibble: 4 √ó 3
  date       sex      n_trips
  <date>     <fct>      <dbl>
1 2024-05-02 female  9997030.
2 2024-05-02 male    9492141.
3 2024-05-09 female 11417441.
4 2024-05-09 male   10838305.
```


Plot it

```{r}
m_vs_f_morning_commute_plot <- m_vs_f_morning_commute |>
  ggplot(aes(x = date, y = n_trips, color = sex)) +
  geom_line() +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

m_vs_f_morning_commute_plot
```

::: {.callout-note appearance="simple"}
For the 2 days we selected, the plot would of course look weird, so we show the plot below for a couple more days.
:::

```{r}
#| include: false
ggsave(
  m_vs_f_morning_commute_plot,
  filename = "media/1-mobility-data/m-vs-f-morning-commute.png",
  width = 5,
  height = 5,
  dpi = 200,
  create.dir = TRUE
)
```

![](media/1-mobility-data/m-vs-f-morning-commute.png)

# Slow aggregation? Convert the data to analysis-ready format

The aggregations above may take 30-60 seconds to complete for 5-7 days. To make the analysis faster even on these few dates, convert the data to an analysis-ready format. By default it is DuckDB. All you need to do is to replace the `spod_get()` call with `spod_convert()` call, and then connect to the database with `spod_connect()`. The conversion for these few days we are working with will take just a minute or two.

::: {.callout-tip}
You can read more about the conversion and different formats in the [conversion vignette](https://ropenspain.github.io/spanishoddata/articles/convert.html). You can find the up to date speed test comparison of formats using mobility data in [https://github.com/e-kotov/spanishoddata-paper-supplement/blob/main/plots/supplement-plots/12_analysis-speed.pdf](https://github.com/e-kotov/spanishoddata-paper-supplement/blob/main/plots/supplement-plots/12_analysis-speed.pdf){target="_blank"}.
:::

```{r}
flows_db_path <- spod_convert(
  type = "origin-destination",
  zones = "districts",
  dates = dates
)

flows_db <- spod_connect(flows_db_path)
```

Now try the same aggregations as above, but on the `flows_db` object. They should be much faster now, alsmost instant. You will notice the speed improvement even for just 2 days compared to CSV. You can find detailed speed comparisons at [the dedicated page](https://ropenspain.github.io/spanishoddata/articles/convert.html#speed-comparison) of the package website.

```{r}
flows_db |>
  summarise(
    n_trips = sum(n_trips, na.rm = TRUE),
    .groups = "drop"
  ) |>
  collect()
```

```{r}
flows_db |>
  group_by(date) |>
  summarise(
    n_trips = sum(n_trips, na.rm = TRUE),
    .groups = "drop"
  ) |>
  collect()
```

# Suggested tasks for hands-on practice

1. **Estimating Stocks from Flows**  
   - Calculate the cumulative number of trips (‚Äústock‚Äù) per district per hour over a full day.
   - Optionally segment by socio-economic group (if available) and compare the resulting distributions.
   - Plot a line chart of `cumulative` vs. `hour`, with one line per district (or facet by a small subset of districts).

2. **Daily & hourly totals**  
   - Aggregate total trips by `date` and `hour` with `group_by(date, hour)` and `summarise(n_trips = sum(n_trips))`.  
   - Create a small-multiples line plot (one panel per date) showing `n_trips` over the hours of the day.

3. **Sex √ó time-window comparison**  
   - Define two time windows (e.g. morning 6‚Äì10 h, evening 17‚Äì21 h) and filter the data accordingly.  
   - Group by `date`, `sex`, and your `window` variable to compute total trips, then draw a grouped bar chart: x = `date`, y = `n_trips`, fill = `sex`, facet = `window`.

4. **Activity-type shares**  
   - For the date `"2024-05-09"`, group by `activity_origin` and calculate each activity‚Äôs percentage share 
   - Visualize `pct` by `activity_origin` in a bar chart, ordering bars by descending share.



{{< include includes/rdocdump.qmd >}}
